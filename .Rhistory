require("data.table")
require("randomForest")
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
setwd('C:/Users/mateo/Documents/repos/financialinclusionClustering')
#leo el dataset , aqui se puede usar algun super dataset con Feature Engineering
dataset  <- fread( "data/data.csv")
glimpse(dataset)
require("data.table")
require("randomForest")
require("data.table")
install.packages('randomForest')
require("randomForest")
r version
version
library("randomForest")
require("data.table")
require("randomForest")
library(tidyverse)
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
setwd('/home/mateo1/repos/financialinclusionClustering')
#leo el dataset , aqui se puede usar algun super dataset con Feature Engineering
dataset <- read.csv('results/data_imputada_2.csv')
glimpse(dataset)
data = dataset[, 3:ncol(dataset) ]
index = dataset[, 1:3]
#quito los nulos para que se pueda ejecutar randomForest,  Dios que algoritmo prehistorico ...
# dataset  <- na.roughfix( dataset )
# dataset  <- na.omit(dataset)
gc()
rf_list = list()
dist_list = list()
hclust_list = list()
sil_list = list()
df_sil <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df_sil) <- c("imputer", "ncluster", "avg_sil")
for(imputer_i in unique(data$imputer)){
print(imputer_i)
modelo  <- randomForest( x= data %>%
filter(imputer== imputer_i)  %>%
select(-imputer)
,
y= NULL,
ntree= 100, #se puede aumentar a 10000
proximity= TRUE,
oob.prox = TRUE )
#genero los clusters jerarquicos
dist_mtrx <-  as.dist ( 1.0 - modelo$proximity) #distancia = 1.0 - proximidad
hclust.rf  <- hclust( dist_mtrx,
method= "ward.D2" )
for (nclust in c(2:15)){
print(nclust)
rf.cluster  <- cutree( hclust.rf, nclust) #corto los arboles
sil <- silhouette (rf.cluster,dist_mtrx) # or use your cluster vector
sil_avg <- summary(sil)[[4]]
row <- c("imputer" = imputer_i, "ncluster"=nclust, "avg_sil" = sil_avg)
df_sil <-  rbind(df_sil, data.frame(t(row)) )
}
rf_list[[imputer_i]] = modelo
dist_list[[imputer_i]] = dist_mtrx
hclust_list[[imputer_i]] = hclust.rf
# sil_list[[imputer_i]] = df_sil
# df_sil <- data.frame(matrix(ncol = 3, nrow = 0))
# colnames(df_sil) <- c("imputer", "ncluster", "avg_sil")
}
#grafico silhoutte
df_sil %>%
mutate_at(.vars = c("ncluster", "avg_sil"), .funs = as.double) %>%
ggplot(aes(ncluster, avg_sil, color = imputer)) +
geom_line()
#grafico silhoutte
df_sil %>%
mutate_at(.vars = c("ncluster", "avg_sil"), .funs = as.double) %>%
ggplot(aes(ncluster, avg_sil, color = imputer)) +
geom_line()+
theme(legend.position = 'bottom')
#grafico silhoutte
df_sil %>%
mutate_at(.vars = c("ncluster", "avg_sil"), .funs = as.double) %>%
ggplot(aes(ncluster, avg_sil, color = imputer)) +
geom_line()+
theme(legend.position = 'bottom')+
labs(y = 'Silhouette promedio', x = 'Cantidad de clústers')
#grafico silhoutte
df_sil %>%
mutate_at(.vars = c("ncluster", "avg_sil"), .funs = as.double) %>%
ggplot(aes(ncluster, avg_sil, color = imputer)) +
geom_line()+
theme(legend.position = 'bottom')+
labs(y = 'Silhouette promedio', x = 'Cantidad de clústers')
#grafico silhoutte
df_sil %>%
mutate_at(.vars = c("ncluster", "avg_sil"), .funs = as.double) %>%
ggplot(aes(ncluster, avg_sil, color = imputer)) +
geom_line()+
theme(legend.position = 'bottom')+
labs(y = 'Silhouette promedio', x = 'Cantidad de clústers')
#grafico silhoutte
df_sil %>%
mutate_at(.vars = c("ncluster", "avg_sil"), .funs = as.double) %>%
ggplot(aes(ncluster, avg_sil, color = imputer)) +
geom_line()+ geom_point()+
theme(legend.position = 'bottom')+
labs(y = 'Silhouette promedio', x = 'Cantidad de clústers')
ggsave(filename = 'results/sil_avg.jpg')
library(tidyverse)
library(ggplot2)
library(GGally)
library(ggridges)
library(VIM)
library(mice) # Cargamos la librería
#wd
setwd('/home/mateo1/repos/financialinclusionClustering')
#data
data = read.csv("data/data.csv")
data = data[ data$year == 2017,]
glimpse(data)
summary(data)
#EDA
summary(aggr(data, sortVar=TRUE, plot=F))
# aggr(data, sortVar=TRUE, oma = c(16, 5, 5, 3), numbers=T)
aggr(data, sortVar=TRUE)
# aggr(data, sortVar=TRUE, oma = c(16, 5, 5, 3), numbers=T)
aggr(data, sortVar=TRUE)
#plot
ggpairs(data=data, columns = 4:ncol(data) )
ggsave("ggpair.jpg")
ggsave("results/ggpair.jpg")
